// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from cosmos_like_wallet.djinni

#ifndef DJINNI_GENERATED_COSMOSLIKEMSGSUBMITPROPOSAL_HPP
#define DJINNI_GENERATED_COSMOSLIKEMSGSUBMITPROPOSAL_HPP

#include "CosmosLikeAmount.hpp"
#include <iostream>
#include <string>
#include <utility>
#include <vector>

namespace ledger { namespace core { namespace api {

struct CosmosLikeMsgSubmitProposal final {
    std::string contentType;
    std::string contentTitle;
    std::string contentDescription;
    std::string proposer;
    std::vector<CosmosLikeAmount> initialDeposit;

    CosmosLikeMsgSubmitProposal(std::string contentType_,
                                std::string contentTitle_,
                                std::string contentDescription_,
                                std::string proposer_,
                                std::vector<CosmosLikeAmount> initialDeposit_)
    : contentType(std::move(contentType_))
    , contentTitle(std::move(contentTitle_))
    , contentDescription(std::move(contentDescription_))
    , proposer(std::move(proposer_))
    , initialDeposit(std::move(initialDeposit_))
    {}

    CosmosLikeMsgSubmitProposal(const CosmosLikeMsgSubmitProposal& cpy) {
       this->contentType = cpy.contentType;
       this->contentTitle = cpy.contentTitle;
       this->contentDescription = cpy.contentDescription;
       this->proposer = cpy.proposer;
       this->initialDeposit = cpy.initialDeposit;
    }

    CosmosLikeMsgSubmitProposal() = default;


    CosmosLikeMsgSubmitProposal& operator=(const CosmosLikeMsgSubmitProposal& cpy) {
       this->contentType = cpy.contentType;
       this->contentTitle = cpy.contentTitle;
       this->contentDescription = cpy.contentDescription;
       this->proposer = cpy.proposer;
       this->initialDeposit = cpy.initialDeposit;
       return *this;
    }

    template <class Archive>
    void load(Archive& archive) {
        archive(contentType, contentTitle, contentDescription, proposer, initialDeposit);
    }

    template <class Archive>
    void save(Archive& archive) const {
        archive(contentType, contentTitle, contentDescription, proposer, initialDeposit);
    }
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_COSMOSLIKEMSGSUBMITPROPOSAL_HPP
