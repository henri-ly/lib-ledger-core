@import "../../errors.djinni"
@import "../amount.djinni"
@import "../../cosmos/addresses.djinni"


#Class representing a Cosmos transaction
CosmosLikeTransaction = interface +c {
	# Get the hash of the transaction.
	getHash(): string;
	# Get Fees (in drop)
	getFees(): Amount;
	# Get destination Cosmos. address
	getReceiver(): optional<CosmosLikeAddress>;
	# Get Cosmos. sender address
	getSender(): CosmosLikeAddress;
	# Get amount of Cosmos to send
	getValue(): optional<Amount>;
	# Serialize the transaction to its raw format.
	serialize(): binary;
	# Set signature of transaction, when a signature is set serialize method gives back serialized Tx
	setSignature(rSignature: binary, sSignature: binary);
	setDERSignature(signature: binary);
	# Get the time when the transaction was issued or the time of the block including
	# this transaction
	getDate(): date;
	# Get Signing public Key
	getSigningPubKey(): binary;
	getCounter(): BigInt;
	getGasLimit(): Amount;
	getGasPrice(): Amount;
	# Get hash of block in which tx is included
	getBlockHash(): optional<string>;
}

#Class representing a Cosmos Operation
CosmosLikeOperation = interface +c {
	#Get operation's transaction
	#@return CosmosLikeTransaction object
	getTransaction(): CosmosLikeTransaction;
}

#Class representing Bitcoin block
CosmosLikeBlock = interface +c {
	#Hash of block
	#@return string representing hash of this block
	getHash(): string;
	#Height of block in blockchain
	#@return 64 bits integer, height of block
	getHeight(): i64;
	#Timestamp when block was mined
	#@return Date object, date when block was appended to blockchain
	getTime(): date;
}

CosmosLikeTransactionBuilder = interface +c {

	# Set type of operation (transaction, origination, reveal ...)
	# Default operation is "transaction" type
	setType(type: CosmosOperationTag): CosmosLikeTransactionBuilder;
	# Send funds to the given address. This method can be called multiple times to send to multiple addresses.
	# @param amount The value to send
	# @param address Address of the recipient
	# @return A reference on the same builder in order to chain calls.
	sendToAddress(amount: Amount, address: string): CosmosLikeTransactionBuilder;
	
	# Send all available funds to the given address.
	# @param address Address of the recipient
	# @return A reference on the same builder in order to chain calls.
	wipeToAddress(address: string): CosmosLikeTransactionBuilder;
	
	# Set fees (in drop) the originator is willing to pay
	# @return A reference on the same builder in order to chain calls.
	setFees(fees: Amount): CosmosLikeTransactionBuilder;
	# Set gas limit the originator is not willing to exceed.
	# @return A reference on the same builder in order to chain calls.
	setGasLimit(gasLimit: Amount): CosmosLikeTransactionBuilder;
	setGasPrice(gasPrice: Amount): CosmosLikeTransactionBuilder;

	# Build a transaction from the given builder parameters.
	build(callback: Callback<CosmosLikeTransaction>);
	
	# Creates a clone of this builder.
	# @return A copy of the current builder instance.
	clone(): CosmosLikeTransactionBuilder;
	
	# Reset the current instance to its initial state
	reset();
	
	static parseRawUnsignedTransaction(currency: Currency, rawTransaction: binary): CosmosLikeTransaction;
	static parseRawSignedTransaction(currency: Currency, rawTransaction: binary): CosmosLikeTransaction;
}
	
#Class representing a Cosmos account
CosmosLikeAccount = interface +c {
	broadcastRawTransaction(transaction: binary, callback: Callback<string>);
	broadcastTransaction(transaction: CosmosLikeTransaction, callback: Callback<string>);
	buildTransaction(): CosmosLikeTransactionBuilder;
}

CosmosConfigurationDefaults = interface +c {
	const Cosmos_DEFAULT_API_ENDPOINT: string = "https://stargate.cosmos.network";
}
